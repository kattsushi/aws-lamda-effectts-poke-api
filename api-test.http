###
# Pokemon API - REST Client Tests
# Use with VSCode REST Client extension
# Make sure serverless offline is running: pnpm run dev:serverless
###

@baseUrl = http://localhost:4000/dev
@localUrl = http://localhost:4000

### Health Check (if available)
GET {{localUrl}}/health

###
# 🎯 MAIN ENDPOINT - GET ALL POKEMON (REQUIRED FORMAT)
# This is the main requirement: returns ALL 1302 Pokemon in format [{"name": "...", "types": [...]}]
# ⚠️  May take 20+ seconds on first request
GET {{baseUrl}}/pokemons

###
# 🔍 INDIVIDUAL POKEMON - Get specific Pokemon by name
GET {{baseUrl}}/pokemon/charizard

###
# 🔍 INDIVIDUAL POKEMON - Get Pikachu
GET {{baseUrl}}/pokemon/pikachu

###
# 🔍 INDIVIDUAL POKEMON - Get Bulbasaur
GET {{baseUrl}}/pokemon/bulbasaur

###
# 🔍 INDIVIDUAL POKEMON - Get Mew
GET {{baseUrl}}/pokemon/mew

###
# 🔍 INDIVIDUAL POKEMON - Test with ID instead of name
GET {{baseUrl}}/pokemon/25

###
# 📄 PAGINATED LIST - Get first 10 Pokemon
GET {{baseUrl}}/pokemon?limit=10&offset=0

###
# 📄 PAGINATED LIST - Get next 10 Pokemon
GET {{baseUrl}}/pokemon?limit=10&offset=10

###
# 📄 PAGINATED LIST - Get 5 Pokemon starting from position 20
GET {{baseUrl}}/pokemon?limit=5&offset=20

###
# 📄 PAGINATED LIST - Large limit test
GET {{baseUrl}}/pokemon?limit=50&offset=0

###
# 📄 PAGINATED LIST - Default parameters (no query params)
GET {{baseUrl}}/pokemon

###
# ❌ ERROR TESTING - Invalid Pokemon name
GET {{baseUrl}}/pokemon/invalidpokemon

###
# ❌ ERROR TESTING - Invalid limit (negative)
GET {{baseUrl}}/pokemon?limit=-5&offset=0

###
# ❌ ERROR TESTING - Invalid offset (negative)
GET {{baseUrl}}/pokemon?limit=10&offset=-1

###
# ❌ ERROR TESTING - Invalid limit (too large)
GET {{baseUrl}}/pokemon?limit=10000&offset=0

###
# 🚀 LAMBDA DIRECT INVOCATION - getPokemon function
POST {{localUrl}}/2015-03-31/functions/getPokemon/invocations
Content-Type: application/json

{
  "pathParameters": {
    "name": "charizard"
  },
  "httpMethod": "GET",
  "path": "/pokemon/charizard"
}

###
# 🚀 LAMBDA DIRECT INVOCATION - listPokemons function
POST {{localUrl}}/2015-03-31/functions/listPokemons/invocations
Content-Type: application/json

{
  "queryStringParameters": {
    "limit": "5",
    "offset": "0"
  },
  "httpMethod": "GET",
  "path": "/pokemon"
}

###
# 🚀 LAMBDA DIRECT INVOCATION - getAllPokemons function (MAIN REQUIREMENT)
# ⚠️  This may take 20+ seconds
POST {{localUrl}}/2015-03-31/functions/getAllPokemons/invocations
Content-Type: application/json

{
  "httpMethod": "GET",
  "path": "/pokemons"
}

###
# 🧪 PERFORMANCE TEST - Time the main endpoint
# @name getAllPokemon
GET {{baseUrl}}/pokemons

###
# 📊 RESPONSE VALIDATION - Check first few Pokemon from main endpoint
GET {{baseUrl}}/pokemons

###
# 🔄 CONCURRENT TEST - Multiple requests (run these simultaneously)
GET {{baseUrl}}/pokemon/charizard

###
GET {{baseUrl}}/pokemon/pikachu

###
GET {{baseUrl}}/pokemon/bulbasaur

###
# 📈 LOAD TEST - Paginated requests
GET {{baseUrl}}/pokemon?limit=20&offset=0

###
GET {{baseUrl}}/pokemon?limit=20&offset=20

###
GET {{baseUrl}}/pokemon?limit=20&offset=40

###
# 🎯 FINAL VALIDATION - Main requirement endpoint
# This should return exactly: [{"name": "bulbasaur", "types": ["grass", "poison"]}, ...]
GET {{baseUrl}}/pokemons

###
# 📝 NOTES:
# 1. Make sure to run `pnpm run dev:serverless` before testing
# 2. The /pokemons endpoint may take 20+ seconds on first request
# 3. All endpoints use proper Effect-TS error handling
# 4. Individual Pokemon endpoint supports both name and ID
# 5. Paginated endpoint supports limit and offset parameters
# 6. Lambda direct invocation endpoints are for advanced testing
###
